Brief Description
=================

We will briefly describe the changes we have to make in order to enable the Block Call Functionality. First of all, we will import a JList for displaying other Users that the logged user designates to block their calls, a Text Field in order he can properly define a designated user to block or to unblock and of course the respective JButtons for "Block" and "Unblock". Thus, we need to create the "comunicator.gui.CallBlock" and edit "communicator.gui.GuiManager". The default state for our system when the user selects CallBlocking in GUI will be to send a request to Proxy in order we can acquire the List of Blocked Users for the Logged User. After that the latter can insert the username of a user he wants to perform an action and can simply click "Block" or "Unblock" buttons. The Button will send the respective requests to Proxy in order to Add or Remove from the user's blocked list the selected user. For this purpose we will need to modify "communicator.SipCommunicator" and "proxy.Proxy" in order to be able to communicate by sending and listening to messages respectively. Both Proxy and Communicator will have their own "BlockCall" java class for manipulating the request. All the private fields of each one of these classes have their respective get() and set() methods. The Blocking mechanism is completely independent from the Calling one, by this we mean that if a blocked user tries to call the a user who blocked him, he would get a busy signal or something equivalent from the call mechanism. We will use the response processBusyHere() from the sip.communicator.Processing. Some of the code below could be changed throughout the process of implementation. This is only a hard estimation of what the code would be like. 

==============
= Pseudocode =
==============


proxy.CallBlocking.java
======================

private UserID
private BlockedID

protected AddToList(UserID, BlockedID):
	q_user_reg = execute_query("select count(*) from users where Uid = UserID")
	if q_user_reg == 0 then Exception(Unregistered User) 

	q_blocked_reg = execute_query("select count(*) from users where Uid = BlockedID")
	if q_blocked_reg == 0 then Exception(Designated Blocked User Unregistered)

	q_already_blocked = execute_query("select count(*) from BLOCKEDPAIRS where Uid1 = UserID and Uid2 = BlockedID")
	if q_already_blocked == 1 then Exception(Designated Blocked User Already Blocked)
	

	q = execute_query("insert into BLOCKEDPAIRS (Uid1 = UserID, Uid2 = BlockedID)")
	
	return
	

protected DeleteFromList(UserID, BlockedID):
	q = execute_query("delete from BLOCKEDPAIRS where Uid1 = UserID and Uid2 = BlockedID")

	return 

public getBlockedList(UserID):
	return execute_query("select BlockedID from BLOCKEDPAIRS where Uid1 = UserID")

// Must be called everytime user wants to block or unblock someone
public Block(UserID, BlockedID, BlockFlag)
	setUserID(UserID)
	setBlockedID(BlockedID)
	if (BlockFlag):
		AddToList()
	else:
		DeleteFromList()
	return 0

public setUserID(Uid):
	UserID = Uid
	return

public setBlockedID(Uid):
	BlockedID = Uid
	return

public getUserID():
	return UserID	

public getBlockedID():
	return BlockedID

proxy.Proxy.java
================
we have to add the following lines:

public RequestHandler:
	if (request{0} is Block):
		return Block(request{1}, request{2}, 1)
	if (request{0} is Unblock):
		return Block(request{1}, request{2}, 0)
	if (request{0} is GetBlockedList):
		return getBlockedList(request{1})

communicator.sip.CallBlockingProcessing.java
===========================================

private UserID
private BlockedID

public setUserID(Uid):
	UserID = Uid
	return

public setBlockedID(Uid):
	BlockedID = Uid
	return

public getUserID():
	return UserID	

public getBlockedID():
	return BlockedID

public Block():
	send_request({Block, UserID, BlockedID})
	return response 

public Unblock():
	send_request({Unblock, UserID, BlockedID})
	return response 

public GetBlockedList():
	send_request({GetBlockedList, UserID})
	return response 


communicator.SipCommunicator.java
=================================

public BlockRequest():
	CallBlockingProcessing.Block()
	return response	

public UnblockRequest():
	CallBlockingProcessing.Unblock()
	return response	

public GetBlockedListRequest():
	CallBlockingProcessing.GetBlockedList()
	return response	

communicator.gui.GuiManager.java
================================

private JButtons BlockButton
private JButtons UnblockButton
private JList BlockedList
private JTextField BlockedIDText

communicator.gui.CallBlockingInterface.java
====================================

==================Block Button=========================

private void addBlockButton
private void OnClickBlockButton

public addBlockButton():
	SetBlockButton

public OnClickBlockButton():
	communicator.SipCommunicator.BlockRequest(getUserID(), getBlockedID())
	communicator.SipCommunicator.GetBlockedListRequest(getUserID(), getBlockedID())

==================Unblock Button=========================

private void addUnblockButton
private void OnClickUnblockButton

public addUnblockButton():
	SetUnblockButton

public OnClickUnblockButton():
	communicator.SipCommunicator.UnblockRequest(getUserID(), getBlockedID())
	updateList()

==================Text=========================

private void addField
private void OnUnhover
private String BlockedIDText

public getBlockedIDText():
	return BlockedIDText.CanvasText	

public addField():
	communicator.sip.CallBlockingProcessing.setUserID(Internal.Login.UserID)
	SetBlockedIDText

public OnUnhover():
	communicator.sip.CallBlockingProcessing.setBlockedID(getBlockedIDText())
	updateList()

==================List=========================
private void addList
private void updateList

public addList():
	SetBlockedList
	updateList()

public updateList():
	communicator.SipCommunicator.GetBlockedListRequest()
